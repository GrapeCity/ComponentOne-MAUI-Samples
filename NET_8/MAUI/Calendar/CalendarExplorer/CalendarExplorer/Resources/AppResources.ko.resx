<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CustomAppearanceDescription" xml:space="preserve">
    <value>사용자 지정 스타일이 있는 달력을 보여줍니다.</value>
  </data>
  <data name="CustomAppearanceTitle" xml:space="preserve">
    <value>사용자 지정 외형</value>
  </data>
  <data name="CustomDayContentDescription" xml:space="preserve">
    <value>사용자 지정 콘텐츠를 표시하도록 일 슬롯을 사용자 지정하는 방법을 보여줍니다.</value>
  </data>
  <data name="CustomDayContentTitle" xml:space="preserve">
    <value>사용자 지정 일 콘텐츠</value>
  </data>
  <data name="CustomHeaderDescription" xml:space="preserve">
    <value>인기 있는 Android 또는 iOS 달력 앱에서 아이디어를 얻어 만든 사용자 지정 머리글을 표시합니다.</value>
  </data>
  <data name="CustomHeaderTitle" xml:space="preserve">
    <value>사용자 지정 머리글</value>
  </data>
  <data name="CustomSelectionDescription" xml:space="preserve">
    <value>사용자 지정 선택 시나리오를 표시합니다.</value>
  </data>
  <data name="CustomSelectionMessage" xml:space="preserve">
    <value>1단계: 날짜 선택
2단계: 다른 주에서 또 다른 날짜를 선택
관찰: 주말은 선택되지 않습니다.</value>
  </data>
  <data name="CustomSelectionTitle" xml:space="preserve">
    <value>사용자 지정 선택</value>
  </data>
  <data name="DecadeLabel" xml:space="preserve">
    <value>10년</value>
  </data>
  <data name="GettingStartedDescription" xml:space="preserve">
    <value>선택과 상호 작용을 제공하는 기본 달력을 표시합니다.</value>
  </data>
  <data name="GettingStartedTitle" xml:space="preserve">
    <value>시작하기</value>
  </data>
  <data name="MonthLabel" xml:space="preserve">
    <value>월</value>
  </data>
  <data name="PickDateLabel" xml:space="preserve">
    <value>날짜 선택</value>
  </data>
  <data name="PopupEditorDescription" xml:space="preserve">
    <value>컨트롤을 팝업 날짜 선택기로 사용하는 방법을 표시합니다.</value>
  </data>
  <data name="PopupEditorTitle" xml:space="preserve">
    <value>팝업 편집기</value>
  </data>
  <data name="SelectedDateMessage" xml:space="preserve">
    <value>{0:d} 날짜가 선택되었습니다.</value>
  </data>
  <data name="TodayLabel" xml:space="preserve">
    <value>오늘</value>
  </data>
  <data name="VerticalOrientationDescription" xml:space="preserve">
    <value>세로 탐색/스크롤이 있는 달력을 표시합니다.</value>
  </data>
  <data name="VerticalOrientationTitle" xml:space="preserve">
    <value>수평 방향</value>
  </data>
  <data name="YearLabel" xml:space="preserve">
    <value>연도</value>
  </data>
</root>