<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CustomAppearanceDescription" xml:space="preserve">
    <value>展示自定义的样式的日历。</value>
    <comment>Shows a calendar with a custom style.</comment>
  </data>
  <data name="CustomAppearanceTitle" xml:space="preserve">
    <value>自定义外观</value>
    <comment>Custom Appearance</comment>
  </data>
  <data name="CustomDayContentDescription" xml:space="preserve">
    <value>如何定制天来显示自定义内容。</value>
    <comment>Shows how to customize a day slot to show custom content.</comment>
  </data>
  <data name="CustomDayContentTitle" xml:space="preserve">
    <value>自定义天的内容</value>
    <comment>Custom Day Content</comment>
  </data>
  <data name="CustomHeaderDescription" xml:space="preserve">
    <value>来自于一个通用的Android或iOS日历应用程序的自定义标题</value>
    <comment>Shows a custom header inspired by a popular Android or iOS calendar app.</comment>
  </data>
  <data name="CustomHeaderTitle" xml:space="preserve">
    <value>自定义标题</value>
    <comment>Custom Header</comment>
  </data>
  <data name="CustomSelectionDescription" xml:space="preserve">
    <value>显示自定义选择方案。</value>
    <comment>Shows custom selection scenarios.</comment>
  </data>
  <data name="CustomSelectionMessage" xml:space="preserve">
    <value>第1步: 选择一个日期
第2步: 在不同的周选择另外一个日期
观察: 周末都没有被选择</value>
    <comment>Step 1: Select a date
Step 2: Select another date in a different week
Observe: The weekend days are not selected</comment>
  </data>
  <data name="CustomSelectionTitle" xml:space="preserve">
    <value>自定义选择</value>
    <comment>Custom Selection</comment>
  </data>
  <data name="DecadeLabel" xml:space="preserve">
    <value>十年</value>
    <comment>Decade</comment>
  </data>
  <data name="GettingStartedDescription" xml:space="preserve">
    <value>显示一个有选择和交互的日历。</value>
    <comment>Shows a basic calendar with selection and interaction.</comment>
  </data>
  <data name="GettingStartedTitle" xml:space="preserve">
    <value>开始使用</value>
  </data>
  <data name="MonthLabel" xml:space="preserve">
    <value>月</value>
    <comment>Month</comment>
  </data>
  <data name="PickDateLabel" xml:space="preserve">
    <value>挑选日期</value>
    <comment>Pick Date</comment>
  </data>
  <data name="PopupEditorDescription" xml:space="preserve">
    <value>显示如何使用控件作为弹出日期选择器。</value>
    <comment>Shows how to use the control as a pop-up date selector.</comment>
  </data>
  <data name="PopupEditorTitle" xml:space="preserve">
    <value>弹出编辑器</value>
    <comment>Popup Editor</comment>
  </data>
  <data name="SelectedDateMessage" xml:space="preserve">
    <value>日期 {0:d} 被选择.</value>
    <comment>The date {0:d} was selected.</comment>
  </data>
  <data name="TodayLabel" xml:space="preserve">
    <value>今天</value>
    <comment>Today</comment>
  </data>
  <data name="VerticalOrientationDescription" xml:space="preserve">
    <value>显示一个有垂直导航/滚动的日历.</value>
    <comment>Shows a calendar with vertical navigation/scrolling.</comment>
  </data>
  <data name="VerticalOrientationTitle" xml:space="preserve">
    <value>垂直方向</value>
    <comment>Vertical Orientation</comment>
  </data>
  <data name="YearLabel" xml:space="preserve">
    <value>年</value>
    <comment>Year</comment>
  </data>
</root>